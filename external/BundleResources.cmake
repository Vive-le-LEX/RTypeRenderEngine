function(SetupResourceEmbed)
    if (NOT EXISTS ${CMAKE_BINARY_DIR}/ResourceEmbeds)
        file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/ResourceEmbeds)
    endif ()

    if (NOT EXISTS ${CMAKE_BINARY_DIR}/ResourceEmbeds/ResourceEmbeds.cpp)
        file(WRITE ${CMAKE_BINARY_DIR}/ResourceEmbeds/ResourceEmbeds.cpp "")
    endif ()

    add_library(ResourceEmbeds ${CMAKE_BINARY_DIR}/ResourceEmbeds/ResourceEmbeds.cpp)
    target_include_directories(ResourceEmbeds PUBLIC ${CMAKE_BINARY_DIR}/ResourceEmbeds)
endfunction()

function(AddEmbededResource file outfile)
    GenerateEmbeds(${file} var)
    get_filename_component(base_filename ${var} NAME_WE)
    set(${outfile} ${base_filename} PARENT_SCOPE)
    target_sources(ResourceEmbeds PUBLIC ${var})

    add_custom_command(
            OUTPUT ${var}
            COMMAND ${CMAKE_COMMAND}
            -DRUN_ResourceEmbeds_GENERATE=ON
            -DResourceEmbeds_GENERATE_PATH=${file}
            -P ${CMAKE_CURRENT_SOURCE_DIR}/external/BundleResources.cmake
            MAIN_DEPENDENCY ${file}
    )
endfunction()

function(GenerateEmbeds file generated_cpp)
    get_filename_component(base_filename ${file} NAME_WE)
    get_filename_component(extension ${file} EXT)
    string(REPLACE "." "_" extension ${extension})
    set(base_filename "${base_filename}${extension}")
    set(cpp_name "${base_filename}")
    message(STATUS "Generating embeds in ${cpp_name}")
    file(READ ${file} content HEX)

    string(REGEX MATCHALL "([A-Fa-f0-9][A-Fa-f0-9])" SEPARATED_HEX ${content})

    set(output_cpp "")

    set(counter 0)
    foreach (hex IN LISTS SEPARATED_HEX)
        string(APPEND output_cpp "0x${hex},")
        MATH(EXPR counter "${counter}+1")
        if (counter GREATER 16)
            string(APPEND output_cpp "\n    ")
            set(counter 0)
        endif ()
    endforeach ()

    string(APPEND output_cpp "0x00")

    set(output_cpp "#include \"${cpp_name}.hpp\"

uint8_t ${cpp_name}_data[] = {
    ${output_cpp}
}\;

size_t ${cpp_name}_size = sizeof(${cpp_name}_data)\;
")

    set(output_hpp "#ifndef ${cpp_name}_HPP
    #define ${cpp_name}_HPP
    #include <stdint.h>
    #include <cstddef>

extern \"C\" uint8_t ${cpp_name}_data[]\;
extern \"C\" size_t ${cpp_name}_size\;

#endif // ${cpp_name}_HPP")

    if (NOT EXISTS ${CMAKE_BINARY_DIR}/ResourceEmbeds)
        file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/ResourceEmbeds)
    endif ()

    file(WRITE ${CMAKE_BINARY_DIR}/ResourceEmbeds/${cpp_name}.cpp
            ${output_cpp})

    file(WRITE ${CMAKE_BINARY_DIR}/ResourceEmbeds/${cpp_name}.hpp
            ${output_hpp})

    set(${generated_cpp} ${CMAKE_BINARY_DIR}/ResourceEmbeds/${cpp_name}.cpp PARENT_SCOPE)

endfunction()

function(FinishEmbededResources allEmbeds)
    set(globOutput "/*
** EPITECH PROJECT, 2024
** RTypeRenderEngine
** AutoGeneratedFile
*/

#include <string>
#include <unordered_map>

")
    foreach (embed IN LISTS allEmbeds)
        string(APPEND globOutput "#include \"${CMAKE_BINARY_DIR}/ResourceEmbeds/${embed}.hpp\"\n")
    endforeach()

    string(APPEND globOutput "namespace RTypeEngine {\nstd::unordered_map<std::string, void*> allEmbedsResources = {\n")
    foreach (embed IN LISTS allEmbeds)
        string(APPEND globOutput "    {\"${embed}\", (void*)${embed}_data},\n")
    endforeach()
    string(APPEND globOutput "};\n")

    string(APPEND globOutput "\nstd::unordered_map<std::string, size_t> allEmbedsResourcesSizes = {\n")
    foreach (embed IN LISTS allEmbeds)
        string(APPEND globOutput "    {\"${embed}\", ${embed}_size},\n")
    endforeach()
    string(APPEND globOutput "};\n}")

    file(WRITE ${CMAKE_BINARY_DIR}/ResourceEmbeds/ResourceEmbeds.cpp "${globOutput}")
    message(STATUS "Written embeds in ${CMAKE_BINARY_DIR}/ResourceEmbeds/ResourceEmbeds.cpp")
endfunction()

if (RUN_ResourceEmbeds_GENERATE)
    GenerateEmbeds(${ResourceEmbeds_GENERATE_PATH} var)
endif ()

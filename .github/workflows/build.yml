name: Building

on:
    workflow_run:
      workflows: ["Testing"]
      branches: [main]
      types:
        - completed
    workflow_dispatch:

jobs:
    check:
      name: Check workflow run status
      runs-on: ubuntu-latest
      steps:
      - name: Print status
        run: |
              echo "Workflow run status: ${{ github.event.workflow_run.conclusion }}"
    buildDocumentation:
        name: Build Documentation
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v3
        - uses: webfactory/ssh-agent@v0.7.0
          with:
              ssh-private-key: ${{secrets.KLEO_ORG_SSH}}
        - name: Install linux dependencies
          run: sudo apt-get update && sudo apt-get install libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev doxygen graphviz mesa-common-dev alsa-lib alsa-lib-devel -y
        - name: Download all lint reports artifacts
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            allArtifacts=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/Vive-le-LEX/RTypeRenderEngine/actions/artifacts)

            allArtifacts=$(echo $allArtifacts | jq '.artifacts')
            hashtable=$(mktemp -d)
            iter=0
            cd docs
            while : ; do
                item=$(echo $allArtifacts | jq '.['$iter']')
                if [ "$item" = "null" ]; then
                    break
                fi
                timestamp=$(echo $item | jq '.updated_at')
                timestamp=${timestamp//\"/}
                parsed_timestamp=$(date -d $timestamp +"%s")
                artifact_name=$(echo $item | jq '.name')
                echo "Checking $artifact_name"
                artifact_id=$(echo $item | jq '.id')
                FILE=$hashtable/$artifact_id
                if [ -f "$FILE" ]; then
                    value=$(< "$FILE")
                    if [ $parsed_timestamp -gt $value ]; then
                        echo $parsed_timestamp > "$hashtable/$artifact_id"
                    else
                        echo "Artifact $artifact_name is up to date"
                        continue
                    fi
                else
                    echo $parsed_timestamp > "$hashtable/$artifact_id"
                fi

                if [[ $artifact_name =~ ^\"LINT_REPORT-.*\"$ ]]; then
                    echo "Found: $artifact_name"
                    curl -s -L \
                      -H "Accept: application/vnd.github+json" \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      https://api.github.com/repos/Vive-le-LEX/RTypeRenderEngine/actions/artifacts/$artifact_id/zip > lint_report.zip
                    unzip -o lint_report.zip
                fi
                iter=$((iter+1))
            done
            rm -f lint_report.zip

        - name: Build Documentation
          run: |
                cmake . -B build/ -DIS_BUILDING_DOC=TRUE
                cmake --build build/ --config Release
        - name: Push documentation to GitHub Pages
          uses: peaceiris/actions-gh-pages@v3
          with:
              deploy_key: ${{ secrets.DEPLOY_KEY }}
              publish_dir: ./build/docs/html
              user_name: 'github-actions[bot]'
              user_email: 'github-actions[bot]@users.noreply.github.com'

    build:
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        name: ${{ matrix.platform.name }} ${{ matrix.config.name }}
        runs-on: ${{ matrix.platform.os }}

        strategy:
            fail-fast: false
            matrix:
                platform:
                - { name: Windows VS2019, os: windows-2019  }
                - { name: Windows VS2022, os: windows-2022  }
                - { name: Linux GCC,      os: ubuntu-latest }
                - { name: Linux Clang,    os: ubuntu-latest, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
                - { name: macOS,          os: macos-latest  }
                config:
                - { name: Shared, flags: -DBUILD_SHARED_LIBS=TRUE }
                - { name: Static, flags: -DBUILD_SHARED_LIBS=FALSE }

        steps:
            - uses: actions/checkout@v3
            - uses: webfactory/ssh-agent@v0.7.0
              with:
                ssh-private-key: ${{secrets.KLEO_ORG_SSH}}
            - name: Install linux dependencies
              if: matrix.platform.os == 'ubuntu-latest'
              run: sudo apt-get update && sudo apt-get install libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev mesa-common-dev alsa-lib alsa-lib-devel -y
            - name: Create build directory
              run: mkdir build |
                    cmake -S . -B build ${{matrix.platform.flags}} ${{matrix.config.flags}}
            - name: Build
              shell: bash
              run: cmake --build build --config Release
